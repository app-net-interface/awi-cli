// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/app-net-interface/awi-cli/db (interfaces: Client)

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/app-net-interface/awi-cli/db"
	types "github.com/app-net-interface/awi-cli/types"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// DeleteACL mocks base method.
func (m *MockClient) DeleteACL(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteACL indicates an expected call of DeleteACL.
func (mr *MockClientMockRecorder) DeleteACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppConnection", reflect.TypeOf((*MockClient)(nil).DeleteACL), arg0)
}

// DeleteConnectionRequest mocks base method.
func (m *MockClient) DeleteConnectionRequest(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectionRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnectionRequest indicates an expected call of DeleteConnectionRequest.
func (mr *MockClientMockRecorder) DeleteConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionRequest", reflect.TypeOf((*MockClient)(nil).DeleteConnectionRequest), arg0)
}

// GetACL mocks base method.
func (m *MockClient) GetACL(arg0 string) (*db.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACL", arg0)
	ret0, _ := ret[0].(*db.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetACL indicates an expected call of GetACL.
func (mr *MockClientMockRecorder) GetACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACL", reflect.TypeOf((*MockClient)(nil).GetACL), arg0)
}

// GetConnectionRequest mocks base method.
func (m *MockClient) GetConnectionRequest(arg0 string) (*types.ConnectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionRequest", arg0)
	ret0, _ := ret[0].(*types.ConnectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionRequest indicates an expected call of GetConnectionRequest.
func (mr *MockClientMockRecorder) GetConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionRequest", reflect.TypeOf((*MockClient)(nil).GetConnectionRequest), arg0)
}

// ListACLs mocks base method.
func (m *MockClient) ListACLs() ([]db.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListACLs")
	ret0, _ := ret[0].([]db.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListACLs indicates an expected call of ListACLs.
func (mr *MockClientMockRecorder) ListACLs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListACLs", reflect.TypeOf((*MockClient)(nil).ListACLs))
}

// ListConnectionRequests mocks base method.
func (m *MockClient) ListConnectionRequests() ([]types.ConnectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionRequests")
	ret0, _ := ret[0].([]types.ConnectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectionRequests indicates an expected call of ListConnectionRequests.
func (mr *MockClientMockRecorder) ListConnectionRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionRequests", reflect.TypeOf((*MockClient)(nil).ListConnectionRequests))
}

// Open mocks base method.
func (m *MockClient) Open(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockClientMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockClient)(nil).Open), arg0)
}

// UpdateACL mocks base method.
func (m *MockClient) UpdateACL(arg0 *db.ACL, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateACL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateACL indicates an expected call of UpdateACL.
func (mr *MockClientMockRecorder) UpdateACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateACL", reflect.TypeOf((*MockClient)(nil).UpdateACL), arg0, arg1)
}

// UpdateConnectionRequest mocks base method.
func (m *MockClient) UpdateConnectionRequest(arg0 *types.ConnectionRequest, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectionRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConnectionRequest indicates an expected call of UpdateConnectionRequest.
func (mr *MockClientMockRecorder) UpdateConnectionRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionRequest", reflect.TypeOf((*MockClient)(nil).UpdateConnectionRequest), arg0, arg1)
}
